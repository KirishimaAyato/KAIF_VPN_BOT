import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
BOT_TOKEN = os.getenv('BOT_TOKEN', '7250905524:AAFUAAwNvhYmch5Mna2o91TdOGYr6d5KqQM')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    
    welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã

–≠—Ç–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π VPN –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞ –≤—ã –æ–Ω–ª–∞–π–Ω.

üöÄ–ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
üåê–ü–µ—Ä–µ–¥–æ–≤–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª  
üîí–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
appstore.com/kaifuvpn
–°–∫–∞—á–∞–ª–∏ ‚Üí –≤—Å—Ç–∞–≤–∏–ª–∏ –∫–ª—é—á ‚Üí –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy_subscription')],
        [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", callback_data='how_to_setup')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def buy_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠–∫—Ä–∞–Ω –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    subscription_text = """üìÖ <b>1 –ú–µ—Å—è—Ü</b>
üí∞ <s>249—Ä</s>/199—Ä
üíé–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
üé∞x1 –®–∞–Ω—Å –∫ –≤—ã–∏–≥—Ä—ã—à—É

üìÖ <b>6 –º–µ—Å—è—Ü–µ–≤</b>
üí∞ <s>1494—Ä</s>/999—Ä (-15%)
üíé–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
üé∞x6 –®–∞–Ω—Å –∫ –≤—ã–∏–≥—Ä—ã—à—É

üìÖ <b>12 –º–µ—Å—è—Ü–µ–≤</b>
üí∞ <s>2988—Ä</s>/1799—Ä (-25%)
üíé–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
üé∞x12 –®–∞–Ω—Å –∫ –≤—ã–∏–≥—Ä—ã—à—É"""

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
    keyboard = [
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü - 199—Ä", callback_data='plan_1_month')],
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 999—Ä (-15%)", callback_data='plan_6_months')],
        [InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 1799—Ä (-25%)", callback_data='plan_12_months')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        subscription_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def personal_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    cabinet_text = """<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üë§

üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> –ê–∫—Ç–∏–≤–Ω–∞
üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> 15.02.2024
üîë <b>–í–∞—à –∫–ª—é—á:</b> <code>kaif-vpn-key-123456</code>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –º–µ—Å—è—Ü: 15.2 –ì–ë
‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: 25
‚Ä¢ –¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã"""

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á", callback_data='update_key')],
        [InlineKeyboardButton("üì± –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data='download_app')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        cabinet_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def help_section(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏"""
    
    help_text = """<b>–ü–æ–º–æ—â—å</b> üÜò

<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>

‚ùì <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN?</b>
1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
4. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"

‚ùì <b>–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ?</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ

‚ùì <b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?</b>
–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞

üìû <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @kaif_vpn_support"""

    keyboard = [
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data='contact_support')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def how_to_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    
    setup_text = """<b>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?</b> ‚öôÔ∏è

<b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>

<b>1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>
‚Ä¢ iOS: App Store ‚Üí "KAIF VPN"
‚Ä¢ Android: Google Play ‚Üí "KAIF VPN"

<b>2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á</b>
‚Ä¢ –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–æ—Ç–µ
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞

<b>3Ô∏è‚É£ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN</b>
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"

<b>4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</b>
‚Ä¢ –í —Å–ø–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∑–µ–ª–µ–Ω—ã–π –∑–Ω–∞—á–æ–∫)

‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b> –¢–µ–ø–µ—Ä—å –≤–∞—à —Ç—Ä–∞—Ñ–∏–∫ –∑–∞—â–∏—â–µ–Ω"""

    keyboard = [
        [InlineKeyboardButton("üì± –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data='download_app')],
        [InlineKeyboardButton("üé• –í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='video_guide')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        setup_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def handle_plan_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    
    query = update.callback_query
    plan = query.data
    
    plans = {
        'plan_1_month': {'name': '1 –º–µ—Å—è—Ü', 'price': '199—Ä', 'original': '249—Ä'},
        'plan_6_months': {'name': '6 –º–µ—Å—è—Ü–µ–≤', 'price': '999—Ä', 'original': '1494—Ä', 'discount': '15%'},
        'plan_12_months': {'name': '12 –º–µ—Å—è—Ü–µ–≤', 'price': '1799—Ä', 'original': '2988—Ä', 'discount': '25%'}
    }
    
    selected_plan = plans.get(plan.replace('plan_', '').replace('_', '_'))
    
    if selected_plan:
        payment_text = f"""<b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b> üí≥

<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ:</b> {selected_plan['name']}
<b>–¶–µ–Ω–∞:</b> {selected_plan['price']}
{f"<s>{selected_plan['original']}</s> —Å–∫–∏–¥–∫–∞ {selected_plan.get('discount', '')}" if 'discount' in selected_plan else ''}

üíé –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª VPN
üöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
üé∞ –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>"""

        keyboard = [
            [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f'pay_card_{plan}')],
            [InlineKeyboardButton("üì± –°–ë–ü", callback_data=f'pay_sbp_{plan}')],
            [InlineKeyboardButton("ü•ù QIWI", callback_data=f'pay_qiwi_{plan}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data='buy_subscription')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.answer()
        await query.edit_message_text(
            payment_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    query = update.callback_query
    
    if query.data == 'buy_subscription':
        await buy_subscription(update, context)
    elif query.data == 'personal_cabinet':
        await personal_cabinet(update, context)
    elif query.data == 'help':
        await help_section(update, context)
    elif query.data == 'how_to_setup':
        await how_to_setup(update, context)
    elif query.data.startswith('plan_'):
        await handle_plan_selection(update, context)
    elif query.data == 'back_to_main':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
        await start_from_callback(update, context)
    elif query.data == 'download_app':
        await query.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: appstore.com/kaifuvpn", show_alert=True)
    elif query.data == 'contact_support':
        await query.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @kaif_vpn_support", show_alert=True)
    elif query.data.startswith('pay_'):
        await query.answer("–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    else:
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def start_from_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É –∏–∑ callback"""
    
    welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã

–≠—Ç–æ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π VPN –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞ –≤—ã –æ–Ω–ª–∞–π–Ω.

üöÄ–ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
üåê–ü–µ—Ä–µ–¥–æ–≤–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª  
üîí–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
appstore.com/kaifuvpn
–°–∫–∞—á–∞–ª–∏ ‚Üí –≤—Å—Ç–∞–≤–∏–ª–∏ –∫–ª—é—á ‚Üí –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å"""

    keyboard = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy_subscription')],
        [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", callback_data='how_to_setup')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or BOT_TOKEN == 'your_token_here':
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ KAIF VPN –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 
